1. Created SSH key pair that will be used to login to EC2 instance.
2. Created cloudformation stack to provision VPC and EC2 instance.

*********************************************************************************
      Cloud Formation Code
Description: CF to deploy VPC and an SSH enabled EC2 instance
Parameters:
  KeyName:
    Description: Name of SSH KeyPair
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Provide the name of an existing SSH key pair
  InstanceTypeParameter:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
    Description: "Select the instance type"
Mappings:
  Subnet1Config:
    VPC1:
      CIDR: 10.0.0.0/16
    Public1:
      CIDR: 10.0.0.0/24
Resources:
  VPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap
        - Subnet1Config
        - VPC1
        - CIDR
      Tags:
        - Key: Name
          Value: MyVPC
  VPC1PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs us-east-1
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - Subnet1Config
        - Public1
        - CIDR
      Tags:
        - Key: Name
          Value: MYPUBLIC
  InternetGateway1:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: MYIGW
  GatewayToInternet1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway1
  PublicRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: MYRT
  PublicRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet1
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1
  PublicSubnet1RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPC1PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1
  PublicNetworkAcl1:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: MYNACL
  InboundHTTPPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundEmphemeralPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnet1NetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref VPC1PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl1
  EC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceTypeParameter
      ImageId: 'ami-05c13eab67c5d8861'
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: MyEC2Instance
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: MySG
      GroupDescription: Enable SSH access via port 22 from anywhere
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
